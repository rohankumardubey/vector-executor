// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/operator.proto

package org.apache.spark.sql.execution.serde;

public final class OperatorOuterClass {
  private OperatorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface OperatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.spark_operator.Operator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.spark.spark_operator.Projection projection = 2;</code>
     * @return Whether the projection field is set.
     */
    boolean hasProjection();
    /**
     * <code>.spark.spark_operator.Projection projection = 2;</code>
     * @return The projection.
     */
    org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection getProjection();
    /**
     * <code>.spark.spark_operator.Projection projection = 2;</code>
     */
    org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder getProjectionOrBuilder();

    public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.OpStructCase getOpStructCase();
  }
  /**
   * <pre>
   * The basic message representing a Spark operator.
   * </pre>
   *
   * Protobuf type {@code spark.spark_operator.Operator}
   */
  public static final class Operator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.spark_operator.Operator)
      OperatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Operator.newBuilder() to construct.
    private Operator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Operator() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Operator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Operator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder subBuilder = null;
              if (opStructCase_ == 2) {
                subBuilder = ((org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_).toBuilder();
              }
              opStruct_ =
                  input.readMessage(org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_);
                opStruct_ = subBuilder.buildPartial();
              }
              opStructCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Operator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Operator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.class, org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder.class);
    }

    private int opStructCase_ = 0;
    private java.lang.Object opStruct_;
    public enum OpStructCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PROJECTION(2),
      OPSTRUCT_NOT_SET(0);
      private final int value;
      private OpStructCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OpStructCase valueOf(int value) {
        return forNumber(value);
      }

      public static OpStructCase forNumber(int value) {
        switch (value) {
          case 2: return PROJECTION;
          case 0: return OPSTRUCT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OpStructCase
    getOpStructCase() {
      return OpStructCase.forNumber(
          opStructCase_);
    }

    public static final int PROJECTION_FIELD_NUMBER = 2;
    /**
     * <code>.spark.spark_operator.Projection projection = 2;</code>
     * @return Whether the projection field is set.
     */
    @java.lang.Override
    public boolean hasProjection() {
      return opStructCase_ == 2;
    }
    /**
     * <code>.spark.spark_operator.Projection projection = 2;</code>
     * @return The projection.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection getProjection() {
      if (opStructCase_ == 2) {
         return (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_;
      }
      return org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
    }
    /**
     * <code>.spark.spark_operator.Projection projection = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder getProjectionOrBuilder() {
      if (opStructCase_ == 2) {
         return (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_;
      }
      return org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (opStructCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (opStructCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator other = (org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator) obj;

      if (!getOpStructCase().equals(other.getOpStructCase())) return false;
      switch (opStructCase_) {
        case 2:
          if (!getProjection()
              .equals(other.getProjection())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (opStructCase_) {
        case 2:
          hash = (37 * hash) + PROJECTION_FIELD_NUMBER;
          hash = (53 * hash) + getProjection().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The basic message representing a Spark operator.
     * </pre>
     *
     * Protobuf type {@code spark.spark_operator.Operator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.spark_operator.Operator)
        org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Operator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Operator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.class, org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        opStructCase_ = 0;
        opStruct_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Operator_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator build() {
        org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator buildPartial() {
        org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator result = new org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator(this);
        if (opStructCase_ == 2) {
          if (projectionBuilder_ == null) {
            result.opStruct_ = opStruct_;
          } else {
            result.opStruct_ = projectionBuilder_.build();
          }
        }
        result.opStructCase_ = opStructCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator) {
          return mergeFrom((org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator other) {
        if (other == org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.getDefaultInstance()) return this;
        switch (other.getOpStructCase()) {
          case PROJECTION: {
            mergeProjection(other.getProjection());
            break;
          }
          case OPSTRUCT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int opStructCase_ = 0;
      private java.lang.Object opStruct_;
      public OpStructCase
          getOpStructCase() {
        return OpStructCase.forNumber(
            opStructCase_);
      }

      public Builder clearOpStruct() {
        opStructCase_ = 0;
        opStruct_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection, org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder, org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder> projectionBuilder_;
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       * @return Whether the projection field is set.
       */
      @java.lang.Override
      public boolean hasProjection() {
        return opStructCase_ == 2;
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       * @return The projection.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection getProjection() {
        if (projectionBuilder_ == null) {
          if (opStructCase_ == 2) {
            return (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_;
          }
          return org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
        } else {
          if (opStructCase_ == 2) {
            return projectionBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      public Builder setProjection(org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection value) {
        if (projectionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          opStruct_ = value;
          onChanged();
        } else {
          projectionBuilder_.setMessage(value);
        }
        opStructCase_ = 2;
        return this;
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      public Builder setProjection(
          org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder builderForValue) {
        if (projectionBuilder_ == null) {
          opStruct_ = builderForValue.build();
          onChanged();
        } else {
          projectionBuilder_.setMessage(builderForValue.build());
        }
        opStructCase_ = 2;
        return this;
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      public Builder mergeProjection(org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection value) {
        if (projectionBuilder_ == null) {
          if (opStructCase_ == 2 &&
              opStruct_ != org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance()) {
            opStruct_ = org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.newBuilder((org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_)
                .mergeFrom(value).buildPartial();
          } else {
            opStruct_ = value;
          }
          onChanged();
        } else {
          if (opStructCase_ == 2) {
            projectionBuilder_.mergeFrom(value);
          }
          projectionBuilder_.setMessage(value);
        }
        opStructCase_ = 2;
        return this;
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      public Builder clearProjection() {
        if (projectionBuilder_ == null) {
          if (opStructCase_ == 2) {
            opStructCase_ = 0;
            opStruct_ = null;
            onChanged();
          }
        } else {
          if (opStructCase_ == 2) {
            opStructCase_ = 0;
            opStruct_ = null;
          }
          projectionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder getProjectionBuilder() {
        return getProjectionFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder getProjectionOrBuilder() {
        if ((opStructCase_ == 2) && (projectionBuilder_ != null)) {
          return projectionBuilder_.getMessageOrBuilder();
        } else {
          if (opStructCase_ == 2) {
            return (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_;
          }
          return org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
        }
      }
      /**
       * <code>.spark.spark_operator.Projection projection = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection, org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder, org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder> 
          getProjectionFieldBuilder() {
        if (projectionBuilder_ == null) {
          if (!(opStructCase_ == 2)) {
            opStruct_ = org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
          }
          projectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection, org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder, org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder>(
                  (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) opStruct_,
                  getParentForChildren(),
                  isClean());
          opStruct_ = null;
        }
        opStructCase_ = 2;
        onChanged();;
        return projectionBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.spark_operator.Operator)
    }

    // @@protoc_insertion_point(class_scope:spark.spark_operator.Operator)
    private static final org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator();
    }

    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Operator>
        PARSER = new com.google.protobuf.AbstractParser<Operator>() {
      @java.lang.Override
      public Operator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Operator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Operator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Operator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProjectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:spark.spark_operator.Projection)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    java.util.List<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr> 
        getProjectListList();
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    org.apache.spark.sql.execution.serde.ExprOuterClass.Expr getProjectList(int index);
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    int getProjectListCount();
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    java.util.List<? extends org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder> 
        getProjectListOrBuilderList();
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder getProjectListOrBuilder(
        int index);

    /**
     * <code>.spark.spark_operator.Operator child = 2;</code>
     * @return Whether the child field is set.
     */
    boolean hasChild();
    /**
     * <code>.spark.spark_operator.Operator child = 2;</code>
     * @return The child.
     */
    org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator getChild();
    /**
     * <code>.spark.spark_operator.Operator child = 2;</code>
     */
    org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder getChildOrBuilder();
  }
  /**
   * Protobuf type {@code spark.spark_operator.Projection}
   */
  public static final class Projection extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:spark.spark_operator.Projection)
      ProjectionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Projection.newBuilder() to construct.
    private Projection(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Projection() {
      projectList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Projection();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Projection(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                projectList_ = new java.util.ArrayList<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr>();
                mutable_bitField0_ |= 0x00000001;
              }
              projectList_.add(
                  input.readMessage(org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.parser(), extensionRegistry));
              break;
            }
            case 18: {
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder subBuilder = null;
              if (child_ != null) {
                subBuilder = child_.toBuilder();
              }
              child_ = input.readMessage(org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(child_);
                child_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          projectList_ = java.util.Collections.unmodifiableList(projectList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Projection_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Projection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.class, org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder.class);
    }

    public static final int PROJECT_LIST_FIELD_NUMBER = 1;
    private java.util.List<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr> projectList_;
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr> getProjectListList() {
      return projectList_;
    }
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder> 
        getProjectListOrBuilderList() {
      return projectList_;
    }
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    @java.lang.Override
    public int getProjectListCount() {
      return projectList_.size();
    }
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.serde.ExprOuterClass.Expr getProjectList(int index) {
      return projectList_.get(index);
    }
    /**
     * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder getProjectListOrBuilder(
        int index) {
      return projectList_.get(index);
    }

    public static final int CHILD_FIELD_NUMBER = 2;
    private org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator child_;
    /**
     * <code>.spark.spark_operator.Operator child = 2;</code>
     * @return Whether the child field is set.
     */
    @java.lang.Override
    public boolean hasChild() {
      return child_ != null;
    }
    /**
     * <code>.spark.spark_operator.Operator child = 2;</code>
     * @return The child.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator getChild() {
      return child_ == null ? org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.getDefaultInstance() : child_;
    }
    /**
     * <code>.spark.spark_operator.Operator child = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder getChildOrBuilder() {
      return getChild();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < projectList_.size(); i++) {
        output.writeMessage(1, projectList_.get(i));
      }
      if (child_ != null) {
        output.writeMessage(2, getChild());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < projectList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, projectList_.get(i));
      }
      if (child_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getChild());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection other = (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) obj;

      if (!getProjectListList()
          .equals(other.getProjectListList())) return false;
      if (hasChild() != other.hasChild()) return false;
      if (hasChild()) {
        if (!getChild()
            .equals(other.getChild())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getProjectListCount() > 0) {
        hash = (37 * hash) + PROJECT_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getProjectListList().hashCode();
      }
      if (hasChild()) {
        hash = (37 * hash) + CHILD_FIELD_NUMBER;
        hash = (53 * hash) + getChild().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code spark.spark_operator.Projection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:spark.spark_operator.Projection)
        org.apache.spark.sql.execution.serde.OperatorOuterClass.ProjectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Projection_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Projection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.class, org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getProjectListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (projectListBuilder_ == null) {
          projectList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          projectListBuilder_.clear();
        }
        if (childBuilder_ == null) {
          child_ = null;
        } else {
          child_ = null;
          childBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.internal_static_spark_spark_operator_Projection_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection build() {
        org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection buildPartial() {
        org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection result = new org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection(this);
        int from_bitField0_ = bitField0_;
        if (projectListBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            projectList_ = java.util.Collections.unmodifiableList(projectList_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.projectList_ = projectList_;
        } else {
          result.projectList_ = projectListBuilder_.build();
        }
        if (childBuilder_ == null) {
          result.child_ = child_;
        } else {
          result.child_ = childBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) {
          return mergeFrom((org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection other) {
        if (other == org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection.getDefaultInstance()) return this;
        if (projectListBuilder_ == null) {
          if (!other.projectList_.isEmpty()) {
            if (projectList_.isEmpty()) {
              projectList_ = other.projectList_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProjectListIsMutable();
              projectList_.addAll(other.projectList_);
            }
            onChanged();
          }
        } else {
          if (!other.projectList_.isEmpty()) {
            if (projectListBuilder_.isEmpty()) {
              projectListBuilder_.dispose();
              projectListBuilder_ = null;
              projectList_ = other.projectList_;
              bitField0_ = (bitField0_ & ~0x00000001);
              projectListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getProjectListFieldBuilder() : null;
            } else {
              projectListBuilder_.addAllMessages(other.projectList_);
            }
          }
        }
        if (other.hasChild()) {
          mergeChild(other.getChild());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr> projectList_ =
        java.util.Collections.emptyList();
      private void ensureProjectListIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          projectList_ = new java.util.ArrayList<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr>(projectList_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.sql.execution.serde.ExprOuterClass.Expr, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder, org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder> projectListBuilder_;

      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public java.util.List<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr> getProjectListList() {
        if (projectListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(projectList_);
        } else {
          return projectListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public int getProjectListCount() {
        if (projectListBuilder_ == null) {
          return projectList_.size();
        } else {
          return projectListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public org.apache.spark.sql.execution.serde.ExprOuterClass.Expr getProjectList(int index) {
        if (projectListBuilder_ == null) {
          return projectList_.get(index);
        } else {
          return projectListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder setProjectList(
          int index, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr value) {
        if (projectListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProjectListIsMutable();
          projectList_.set(index, value);
          onChanged();
        } else {
          projectListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder setProjectList(
          int index, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder builderForValue) {
        if (projectListBuilder_ == null) {
          ensureProjectListIsMutable();
          projectList_.set(index, builderForValue.build());
          onChanged();
        } else {
          projectListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder addProjectList(org.apache.spark.sql.execution.serde.ExprOuterClass.Expr value) {
        if (projectListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProjectListIsMutable();
          projectList_.add(value);
          onChanged();
        } else {
          projectListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder addProjectList(
          int index, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr value) {
        if (projectListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProjectListIsMutable();
          projectList_.add(index, value);
          onChanged();
        } else {
          projectListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder addProjectList(
          org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder builderForValue) {
        if (projectListBuilder_ == null) {
          ensureProjectListIsMutable();
          projectList_.add(builderForValue.build());
          onChanged();
        } else {
          projectListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder addProjectList(
          int index, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder builderForValue) {
        if (projectListBuilder_ == null) {
          ensureProjectListIsMutable();
          projectList_.add(index, builderForValue.build());
          onChanged();
        } else {
          projectListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder addAllProjectList(
          java.lang.Iterable<? extends org.apache.spark.sql.execution.serde.ExprOuterClass.Expr> values) {
        if (projectListBuilder_ == null) {
          ensureProjectListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, projectList_);
          onChanged();
        } else {
          projectListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder clearProjectList() {
        if (projectListBuilder_ == null) {
          projectList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          projectListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public Builder removeProjectList(int index) {
        if (projectListBuilder_ == null) {
          ensureProjectListIsMutable();
          projectList_.remove(index);
          onChanged();
        } else {
          projectListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder getProjectListBuilder(
          int index) {
        return getProjectListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder getProjectListOrBuilder(
          int index) {
        if (projectListBuilder_ == null) {
          return projectList_.get(index);  } else {
          return projectListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public java.util.List<? extends org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder> 
           getProjectListOrBuilderList() {
        if (projectListBuilder_ != null) {
          return projectListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(projectList_);
        }
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder addProjectListBuilder() {
        return getProjectListFieldBuilder().addBuilder(
            org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.getDefaultInstance());
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder addProjectListBuilder(
          int index) {
        return getProjectListFieldBuilder().addBuilder(
            index, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.getDefaultInstance());
      }
      /**
       * <code>repeated .spark.spark_expression.Expr project_list = 1;</code>
       */
      public java.util.List<org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder> 
           getProjectListBuilderList() {
        return getProjectListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.spark.sql.execution.serde.ExprOuterClass.Expr, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder, org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder> 
          getProjectListFieldBuilder() {
        if (projectListBuilder_ == null) {
          projectListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.spark.sql.execution.serde.ExprOuterClass.Expr, org.apache.spark.sql.execution.serde.ExprOuterClass.Expr.Builder, org.apache.spark.sql.execution.serde.ExprOuterClass.ExprOrBuilder>(
                  projectList_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          projectList_ = null;
        }
        return projectListBuilder_;
      }

      private org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator child_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator, org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder, org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder> childBuilder_;
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       * @return Whether the child field is set.
       */
      public boolean hasChild() {
        return childBuilder_ != null || child_ != null;
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       * @return The child.
       */
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator getChild() {
        if (childBuilder_ == null) {
          return child_ == null ? org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.getDefaultInstance() : child_;
        } else {
          return childBuilder_.getMessage();
        }
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      public Builder setChild(org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          child_ = value;
          onChanged();
        } else {
          childBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      public Builder setChild(
          org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder builderForValue) {
        if (childBuilder_ == null) {
          child_ = builderForValue.build();
          onChanged();
        } else {
          childBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      public Builder mergeChild(org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator value) {
        if (childBuilder_ == null) {
          if (child_ != null) {
            child_ =
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.newBuilder(child_).mergeFrom(value).buildPartial();
          } else {
            child_ = value;
          }
          onChanged();
        } else {
          childBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      public Builder clearChild() {
        if (childBuilder_ == null) {
          child_ = null;
          onChanged();
        } else {
          child_ = null;
          childBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder getChildBuilder() {
        
        onChanged();
        return getChildFieldBuilder().getBuilder();
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      public org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder getChildOrBuilder() {
        if (childBuilder_ != null) {
          return childBuilder_.getMessageOrBuilder();
        } else {
          return child_ == null ?
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.getDefaultInstance() : child_;
        }
      }
      /**
       * <code>.spark.spark_operator.Operator child = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator, org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder, org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder> 
          getChildFieldBuilder() {
        if (childBuilder_ == null) {
          childBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator, org.apache.spark.sql.execution.serde.OperatorOuterClass.Operator.Builder, org.apache.spark.sql.execution.serde.OperatorOuterClass.OperatorOrBuilder>(
                  getChild(),
                  getParentForChildren(),
                  isClean());
          child_ = null;
        }
        return childBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:spark.spark_operator.Projection)
    }

    // @@protoc_insertion_point(class_scope:spark.spark_operator.Projection)
    private static final org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection();
    }

    public static org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Projection>
        PARSER = new com.google.protobuf.AbstractParser<Projection>() {
      @java.lang.Override
      public Projection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Projection(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Projection> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Projection> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.serde.OperatorOuterClass.Projection getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_spark_spark_operator_Operator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_spark_operator_Operator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_spark_spark_operator_Projection_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_spark_spark_operator_Projection_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030src/proto/operator.proto\022\024spark.spark_" +
      "operator\032\024src/proto/expr.proto\"O\n\010Operat" +
      "or\0226\n\nprojection\030\002 \001(\0132 .spark.spark_ope" +
      "rator.ProjectionH\000B\013\n\top_struct\"o\n\nProje" +
      "ction\0222\n\014project_list\030\001 \003(\0132\034.spark.spar" +
      "k_expression.Expr\022-\n\005child\030\002 \001(\0132\036.spark" +
      ".spark_operator.OperatorB&\n$org.apache.s" +
      "park.sql.execution.serdeb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.apache.spark.sql.execution.serde.ExprOuterClass.getDescriptor(),
        });
    internal_static_spark_spark_operator_Operator_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_spark_spark_operator_Operator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_spark_spark_operator_Operator_descriptor,
        new java.lang.String[] { "Projection", "OpStruct", });
    internal_static_spark_spark_operator_Projection_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_spark_spark_operator_Projection_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_spark_spark_operator_Projection_descriptor,
        new java.lang.String[] { "ProjectList", "Child", });
    org.apache.spark.sql.execution.serde.ExprOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
